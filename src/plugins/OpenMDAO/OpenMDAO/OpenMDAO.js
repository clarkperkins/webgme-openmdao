/**
* Generated by PluginGenerator from webgme on Tue Oct 28 2014 21:09:49 GMT-0500 (CDT).
*/

define(['plugin/PluginConfig', 'plugin/PluginBase', 'plugin/OpenMDAO/OpenMDAO/meta', 'ejs', 'plugin/OpenMDAO/OpenMDAO/Templates/Templates'], function (PluginConfig, PluginBase, MetaTypes, ejs, TEMPLATES) {
    'use strict';

    /**
    * Initializes a new instance of OpenMDAO.
    * @class
    * @augments {PluginBase}
    * @classdesc This class represents the plugin OpenMDAO.
    * @constructor
    */
    var OpenMDAO = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.metaTypes = MetaTypes;
    };

    // Prototypal inheritance from PluginBase.
    OpenMDAO.prototype = Object.create(PluginBase.prototype);
    OpenMDAO.prototype.constructor = OpenMDAO;

    /**
    * Gets the name of the OpenMDAO.
    * @returns {string} The name of the plugin.
    * @public
    */
    OpenMDAO.prototype.getName = function () {
        return "OpenMDAO";
    };

    /**
    * Gets the semantic version (semver.org) of the OpenMDAO.
    * @returns {string} The version of the plugin.
    * @public
    */
    OpenMDAO.prototype.getVersion = function () {
        return "0.1.0";
    };

    /**
    * Main function for the plugin to execute. This will perform the execution.
    * Notes:
    * - Always log with the provided logger.[error,warning,info,debug].
    * - Do NOT put any user interaction logic UI, etc. inside this method.
    * - callback always has to be called even if error happened.
    *
    * @param {function(string, plugin.PluginResult)} callback - the result callback
    */
    OpenMDAO.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this;
        self.updateMETA(self.metaTypes);
        // Using the logger.
        self.logger.info('This is a debug message.');
        self.logger.info('This is an info message.');
        self.logger.warning('This is a warning message.');
        self.logger.error('This is an error message.');

        // First transform ejs-files into js files (needed for client-side runs) -> run Templates/combine_templates.js.
        // See instructions in file. You must run this after any modifications to the ejs template.
        var templatePY = ejs.render(TEMPLATES['Python.py.ejs'], {a: 'a', b: 'b'});
        var templateFileName = 'generatedFiles/subDir/Python.py';
        var artifact = self.blobClient.createArtifact('templateFiles');
        artifact.addFile(templateFileName, templatePY, function (err) {
            if (err) {
                callback(err, self.result);
                return;
            }
            self.blobClient.saveAllArtifacts(function (err, hashes) {
                if (err) {
                    callback(err, self.result);
                    return;
                }
                // This will add a download hyperlink in the result-dialog.
                self.result.addArtifact(hashes[0]);
                // This will save the changes. If you don't want to save;
                // exclude self.save and call callback directly from this scope.
                self.result.setSuccess(true);
                self.save('added obj', function (err) {
                    callback(null, self.result);
                });
            });
        });

    };

    return OpenMDAO;
});