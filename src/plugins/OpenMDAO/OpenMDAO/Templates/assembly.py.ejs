# Auto-generated by the OpenMDAO plugin for WebGME
# Modify at your own risk

from openmdao.main.api import Assembly
<%  for (var myPackage in uniqueImports) { %>
<%      if (uniqueImports.hasOwnProperty(myPackage)) { %>
from <%= myPackage %> import <%= uniqueImports[myPackage] %>
<%      } %>
<%  } %>

class <%= name %>(Assembly):

    def configure(self):
        <% if (driver) { %>
        # Driver
        self.add('driver', <%= driver.class_name %>())
        <% } %>

        # Components
        <% components.forEach(function (component) { %>
        self.add('<%= component.name %>', <%= component.class_name %>())
        <% }) %>

        self.driver.workflow.add([
            <% components.forEach(function (component) { %>
            '<%= component.name %>',
            <% }) %>
        ])

        # Objectives
        <% objectives.forEach(function (objective) { %>
        self.driver.add_objective('<%= objective.name %>')
        <% }) %>

        # Parameters
        <% parameters.forEach(function (parameter) { %>
        self.driver.add_parameter('<%= parameter.name %>', low=<%= parameter.low %>, high=<%= parameter.high %>)
        <% }) %>

        # Connections
        <% connections.forEach(function (connection) { %>
        self.connect('<%= connection.from %>', '<%= connection.to %>')
        <% }) %>

        # Passthroughs
        <% passthroughs.forEach(function (passthrough) { %>
        self.create_passthrough('<%= passthrough.name %>')
        <% }) %>

if __name__ == '__main__':
    problem = <%= name %>()

    problem.run()

    print 'Optimized values:'

    <% parameters.forEach(function (parameter) { %>
    print '<%= parameter.name %>: {0}'.format(problem.<%= parameter.name %>)
    <% }) %>