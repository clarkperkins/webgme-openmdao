# Auto-generated by the OpenMDAO plugin for WebGME
# Modify at your own risk

from openmdao.lib.datatypes.api import Float
from openmdao.main.api import Assembly
<%  for (var myPackage in uniqueImports) { %>
<%      if (uniqueImports.hasOwnProperty(myPackage)) { %>
from <%= myPackage %> import <%= uniqueImports[myPackage] %>
<%      } %>
<%  } %>

class <%= name %>(Assembly):

    # Assembly input variables (Assume float for now)
    <% setInputs.forEach(function (input) { %>
    <%= input.name %> = Float(<%= input.value %>, iotype='in', units='<%= input.unit %>')
    <% }) %>

    def configure(self):
        <% if (driver) { %>
        # Driver
        self.add('driver', <%= driver.class_name %>())
        <% if (driver.class_name === 'DOEdriver') { %>
        self.driver.DOEgenerator = Uniform(1000)

        <% } %>
        <% } %>

        # Components
        <% components.forEach(function (component) { %>
        self.add('<%= component.name %>', <%= component.class_name %>())
        <% }) %>

        self.driver.workflow.add([
            <% components.forEach(function (component) { %>
            '<%= component.name %>',
            <% }) %>
        ])

        # Objectives
        <% objectives.forEach(function (objective) { %>
        self.driver.add_objective('<%= objective.name %>')
        <% }) %>

        # Responses
        <% responses.forEach(function (response) { %>
        self.driver.add_response('<%= response.name %>')
        <% }) %>

        # Parameters
        <% parameters.forEach(function (parameter) { %>
        self.driver.add_parameter('<%= parameter.name %>', low=<%= parameter.low %>, high=<%= parameter.high %>)
        <% }) %>

        # Connections
        <% connections.forEach(function (connection) { %>
        self.connect('<%= connection.from %>', '<%= connection.to %>')
        <% }) %>

        # Passthroughs
        <% passthroughs.forEach(function (passthrough) { %>
        self.create_passthrough('<%= passthrough.name %>')
        <% }) %>

if __name__ == '__main__':
    <% if (visualization) { %>
    # Imports for the plotting
    import time
    import os
    import shutil
    from mpl_toolkits.mplot3d import Axes3D
    from matplotlib import cm
    from matplotlib import pyplot as p
    from matplotlib import animation as animation

    if os.path.isdir('img'):
        shutil.rmtree('img')

    os.mkdir('img')

    analysis = <%= name %>()
    # timer start
    tt = time.time()
    analysis.run()

    # Assuming for paraboloids only at this point
    # Get the x,y, and f_xy values
    x = analysis.driver.case_inputs.<%= components[0].name %>.x
    y = analysis.driver.case_inputs.<%= components[0].name %>.y
    f_xy = analysis.driver.case_outputs.<%= components[0].name %>.f_xy

    # Plotting setup
    p.ion()
    fig = p.figure()
    ax = Axes3D(fig)
    slices = range(3,len(x))[::10]
    every_50 = range(3,len(x))[::50]

    # Open/create HTML
    f = open('<%= name %>.html', 'w') # not sure if I did this declaration right
    f.write('<!DOCTYPE html>\n<html>\n<body>\n')
    f.write('<h2> Output and slices for <%= name %> optimization </h2>')
    # Start plotting
    for i in every_50:
        ax.clear()
        ax.set_xlim(-60,60)
        ax.set_ylim(-60,60)
        ax.set_zlim(-1000,6000)
        ax.grid(False)
        temp = ax.plot_trisurf(x[:i],y[:i],f_xy[:i], cmap=cm.jet, linewidth=0.2)
        # Save file and then write to html
        fileName = os.path.join("img", "out_" + str(i) + ".png")
        tempStr = '<img src=\"' + fileName + '\">\n'
        op = "x: {}<br> y: {}<br> f(x, y): {}<br>".format(x[i], y[i], f_xy[i])
        f.write('<h2>Iteration ' + str(i) + ': </h2>' + op + '</p>\n')
        f.write(tempStr)
        p.savefig(fileName)
    print 'Optimized values:'
    <% parameters.forEach(function (parameter) { %>
    print '<%= parameter.name %>: {0}'.format(analysis.<%= parameter.name %>)
    f.write('<%= parameter.name %>: {0}'.format(analysis.<%= parameter.name %>))
    <% }) %>
    p.savefig(os.path.join('img', 'final.png'))
    p.ioff()
    f.write('<h1> Final iteration of optimization </h1>')
    for i in range(len(x)-1, len(x)):
        op = "x: {}<br> y: {}<br> f(x, y): {}<br>".format(x[i], y[i], f_xy[i])
        op2 = "x: {} y: {} f(x, y): {}".format(x[i], y[i], f_xy[i])
        f.write('<h2>' + op + '</h2>\n')
        print op2
    f.write('<img src=\"img/final.png\">')
    f.write('</body>\n</html>')

    <% } else { %>

    analysis = <%= name %>()

    <% if (inputs.length > 0) { %>
    print 'Inputs:'
    <% } %>

    <% inputs.forEach(function (input) { %>
    analysis.<%= input.name %> = <%= input.value %>
    print '<%= input.name %>: <%= input.value %>'
    <% }) %>

    print

    analysis.run()

    <% if (parameters.length > 0) { %>
    print 'Optimized values:'
    <% } %>

    <% parameters.forEach(function (parameter) { %>
    print '<%= parameter.name %>: {0}'.format(analysis.<%= parameter.name %>)
    <% }) %>

    print

    <% if (outputs.length > 0) { %>
    print 'Outputs:'
    <% } %>

    <% outputs.forEach(function (output) { %>
    print '<%= output.name %>: {0}'.format(analysis.<%= output.name %>)
    <% }) %>

    <% } %>