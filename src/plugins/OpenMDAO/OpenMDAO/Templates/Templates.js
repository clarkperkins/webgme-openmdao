/* Generated file based on ejs templates */
define([], function() {
    return {
    "Python.py.ejs": "print \"<%=a%> and <%=b%> provided.\"",
    "assembly.py.ejs": "# Auto-generated by the OpenMDAO plugin for WebGME\n# Modify at your own risk\n\nfrom openmdao.lib.datatypes.api import Float\nfrom openmdao.main.api import Assembly\n<%  for (var myPackage in uniqueImports) { %>\n<%      if (uniqueImports.hasOwnProperty(myPackage)) { %>\nfrom <%= myPackage %> import <%= uniqueImports[myPackage] %>\n<%      } %>\n<%  } %>\n\nclass <%= name %>(Assembly):\n\n    # Assembly input variables (Assume float for now)\n    <% setInputs.forEach(function (input) { %>\n    <%= input.name %> = Float(<%= input.value %>, iotype='in', units='<%= input.unit %>')\n    <% }) %>\n\n    def configure(self):\n        <% if (driver) { %>\n        # Driver\n        self.add('driver', <%= driver.class_name %>())\n        <% if (driver.class_name === 'DOEdriver') { %>\n        self.driver.DOEgenerator = Uniform(1000)\n\n        <% } %>\n        <% } %>\n\n        # Components\n        <% components.forEach(function (component) { %>\n        self.add('<%= component.name %>', <%= component.class_name %>())\n        <% }) %>\n\n        self.driver.workflow.add([\n            <% components.forEach(function (component) { %>\n            '<%= component.name %>',\n            <% }) %>\n        ])\n\n        # Objectives\n        <% objectives.forEach(function (objective) { %>\n        self.driver.add_objective('<%= objective.name %>')\n        <% }) %>\n\n        # Responses\n        <% responses.forEach(function (response) { %>\n        self.driver.add_response('<%= response.name %>')\n        <% }) %>\n\n        # Parameters\n        <% parameters.forEach(function (parameter) { %>\n        self.driver.add_parameter('<%= parameter.name %>', low=<%= parameter.low %>, high=<%= parameter.high %>)\n        <% }) %>\n\n        # Connections\n        <% connections.forEach(function (connection) { %>\n        self.connect('<%= connection.from %>', '<%= connection.to %>')\n        <% }) %>\n\n        # Passthroughs\n        <% passthroughs.forEach(function (passthrough) { %>\n        self.create_passthrough('<%= passthrough.name %>')\n        <% }) %>\n\nif __name__ == '__main__':\n    <% if (visualization) { %>\n    # Imports for the plotting\n    import time\n    import os\n    import shutil\n    from mpl_toolkits.mplot3d import Axes3D\n    from matplotlib import cm\n    from matplotlib import pyplot as p\n    from matplotlib import animation as animation\n\n    if os.path.isdir('img'):\n        shutil.rmtree('img')\n\n    os.mkdir('img')\n\n    analysis = <%= name %>()\n    # timer start\n    tt = time.time()\n    analysis.run()\n\n    # Assuming for paraboloids only at this point\n    # Get the x,y, and f_xy values\n    x = analysis.driver.case_inputs.<%= components[0].name %>.x\n    y = analysis.driver.case_inputs.<%= components[0].name %>.y\n    f_xy = analysis.driver.case_outputs.<%= components[0].name %>.f_xy\n\n    # Plotting setup\n    p.ion()\n    fig = p.figure()\n    ax = Axes3D(fig)\n    slices = range(3,len(x))[::10]\n    every_50 = range(3,len(x))[::50]\n\n    # Open/create HTML\n    f = open('<%= name %>.html', 'w') # not sure if I did this declaration right\n    f.write('<!DOCTYPE html>\\n<html>\\n<body>\\n')\n    f.write('<h2> Output and slices for <%= name %> optimization </h2>')\n    # Start plotting\n    for i in every_50:\n        ax.clear()\n        ax.set_xlim(-60,60)\n        ax.set_ylim(-60,60)\n        ax.set_zlim(-1000,6000)\n        ax.grid(False)\n        temp = ax.plot_trisurf(x[:i],y[:i],f_xy[:i], cmap=cm.jet, linewidth=0.2)\n        # Save file and then write to html\n        fileName = os.path.join(\"img\", \"out_\" + str(i) + \".png\")\n        tempStr = '<img src=\\\"' + fileName + '\\\">\\n'\n        op = \"x: {}<br> y: {}<br> f(x, y): {}<br>\".format(x[i], y[i], f_xy[i])\n        f.write('<h2>Iteration ' + str(i) + ': </h2>' + op + '</p>\\n')\n        f.write(tempStr)\n        p.savefig(fileName)\n    print 'Optimized values:'\n    <% parameters.forEach(function (parameter) { %>\n    print '<%= parameter.name %>: {0}'.format(analysis.<%= parameter.name %>)\n    f.write('<%= parameter.name %>: {0}'.format(analysis.<%= parameter.name %>))\n    <% }) %>\n    p.savefig(os.path.join('img', 'final.png'))\n    p.ioff()\n    f.write('<h1> Final iteration of optimization </h1>')\n    for i in range(len(x)-1, len(x)):\n        op = \"x: {}<br> y: {}<br> f(x, y): {}<br>\".format(x[i], y[i], f_xy[i])\n        op2 = \"x: {} y: {} f(x, y): {}\".format(x[i], y[i], f_xy[i])\n        f.write('<h2>' + op + '</h2>\\n')\n        print op2\n    f.write('<img src=\\\"img/final.png\\\">')\n    f.write('</body>\\n</html>')\n\n    <% } else { %>\n\n    analysis = <%= name %>()\n\n    <% if (inputs.length > 0) { %>\n    print 'Inputs:'\n    <% } %>\n\n    <% inputs.forEach(function (input) { %>\n    analysis.<%= input.name %> = <%= input.value %>\n    print '<%= input.name %>: <%= input.value %>'\n    <% }) %>\n\n    print\n\n    analysis.run()\n\n    <% if (parameters.length > 0) { %>\n    print 'Optimized values:'\n    <% } %>\n\n    <% parameters.forEach(function (parameter) { %>\n    print '<%= parameter.name %>: {0}'.format(analysis.<%= parameter.name %>)\n    <% }) %>\n\n    print\n\n    <% if (outputs.length > 0) { %>\n    print 'Outputs:'\n    <% } %>\n\n    <% outputs.forEach(function (output) { %>\n    print '<%= output.name %>: {0}'.format(analysis.<%= output.name %>)\n    <% }) %>\n\n    <% } %>",
    "run.ejs": "#!/bin/bash\n\npython <%= mainFile %>\n\n<% if (visualization) { %>\nopen <%= htmlFile %>\n<% } %>"
}});