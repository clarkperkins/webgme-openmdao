/* Generated file based on ejs templates */
define([], function() {
    return {
    "Python.py.ejs": "print \"<%=a%> and <%=b%> provided.\"",
    "assembly.py.ejs": "# Auto-generated by the OpenMDAO plugin for WebGME\n# Modify at your own risk\n\nfrom openmdao.lib.datatypes.api import Float\nfrom openmdao.main.api import Assembly\n<%  for (var myPackage in uniqueImports) { %>\n<%      if (uniqueImports.hasOwnProperty(myPackage)) { %>\nfrom <%= myPackage %> import <%= uniqueImports[myPackage] %>\n<%      } %>\n<%  } %>\n\nclass <%= name %>(Assembly):\n\n    # Assembly input variables (Assume float for now)\n    <% inputs.forEach(function (input) { %>\n    <%= input.name %> = Float(<%= input.value %>, iotype='in', units='<%= input.unit %>')\n    <% }) %>\n\n    def configure(self):\n        <% if (driver) { %>\n        # Driver\n        self.add('driver', <%= driver.class_name %>())\n        <% } %>\n\n        # Components\n        <% components.forEach(function (component) { %>\n        self.add('<%= component.name %>', <%= component.class_name %>())\n        <% }) %>\n\n        self.driver.workflow.add([\n            <% components.forEach(function (component) { %>\n            '<%= component.name %>',\n            <% }) %>\n        ])\n\n        # Objectives\n        <% objectives.forEach(function (objective) { %>\n        self.driver.add_objective('<%= objective.name %>')\n        <% }) %>\n\n        # Parameters\n        <% parameters.forEach(function (parameter) { %>\n        self.driver.add_parameter('<%= parameter.name %>', low=<%= parameter.low %>, high=<%= parameter.high %>)\n        <% }) %>\n\n        # Connections\n        <% connections.forEach(function (connection) { %>\n        self.connect('<%= connection.from %>', '<%= connection.to %>')\n        <% }) %>\n\n        # Passthroughs\n        <% passthroughs.forEach(function (passthrough) { %>\n        self.create_passthrough('<%= passthrough.name %>')\n        <% }) %>\n\nif __name__ == '__main__':\n    problem = <%= name %>()\n\n    problem.run()\n\n    print 'Optimized values:'\n\n    <% parameters.forEach(function (parameter) { %>\n    print '<%= parameter.name %>: {0}'.format(problem.<%= parameter.name %>)\n    <% }) %>"
}});