/* Generated file based on ejs templates */
define([], function() {
    return {
    "combine_templates.js.ejs": "/*\r\n* Copyright (C) 2014 Vanderbilt University, All rights reserved.\r\n*\r\n* Author: Zsolt Lattmann, Patrik Meijer\r\n*\r\n* This script will combine all ejs files in the current directory (recursively)\r\n* into one Templates.js file. By importing this file as TEMPLATE you can retrieve the\r\n* content of each original ejs file through TEMPLATES['plugin.js.ejs'].\r\n*\r\n* Usage: Run this script in the directory with the ejs-templates, e.g. '%YourPlugin%/Templates'.\r\n*/\r\n\r\nvar main = function () {\r\n    'use strict';\r\n    var fs = require('fs'),\r\n        isEjsFile = function (str) {\r\n            var ending = '.ejs',\r\n            lastIndex = str.lastIndexOf(ending);\r\n            return (lastIndex !== -1) && (lastIndex + ending.length === str.length);\r\n        },\r\n        walk = function (dir, done) {\r\n            var results = [];\r\n            fs.readdir(dir, function (err, list) {\r\n                if (err) {\r\n                    return done(err);\r\n                }\r\n                var i = 0;\r\n                (function next() {\r\n                    var file = list[i];\r\n                    if (!file) {\r\n                        return done(null, results);\r\n                    }\r\n                    i += 1;\r\n                    file = dir + '/' + file;\r\n                    fs.stat(file, function (err, stat) {\r\n                        if (stat && stat.isDirectory()) {\r\n                            walk(file, function (err, res) {\r\n                                results = results.concat(res);\r\n                                next();\r\n                            });\r\n                        } else {\r\n                            results.push(file);\r\n                            next();\r\n                        }\r\n                    });\r\n                })();\r\n            });\r\n        },\r\n        content = {},\r\n        fileName,\r\n        i,\r\n        templateContent;\r\n\r\n    walk('.', function (err, results) {\r\n        if (err) {\r\n            throw err;\r\n        }\r\n\r\n        for (i = 0; i < results.length; i += 1) {\r\n            fileName = results[i];\r\n            console.info(fileName);\r\n            if (isEjsFile(fileName)) {\r\n                console.info('Was ejs -> added!');\r\n                content[fileName.substring(2)] = fs.readFileSync(fileName, {'encoding': 'utf-8'});\r\n            }\r\n        }\r\n\r\n        console.info(content);\r\n        templateContent = '';\r\n        templateContent += '/* Generated file based on ejs templates */\\r\\n';\r\n        templateContent += 'define([], function() {\\r\\n';\r\n        templateContent += '    return ' + JSON.stringify(content, null, 4);\r\n        templateContent += '});';\r\n\r\n        fs.writeFileSync('Templates.js', templateContent);\r\n        console.info('Created Templates.js');\r\n    });\r\n};\r\n\r\nif (require.main === module) {\r\n    main();\r\n}",
    "meta.js.ejs": "/**\r\n* Generated by PluginGenerator from webgme on <%= date %>.\r\n*/\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n    return {\r\n<%\r\nvar nodeData, i;\r\nfor (i = 0; i < metaNodes.length; i += 1) {\r\n    nodeData = metaNodes[i];%>        '<%= nodeData.name %>': '<%= nodeData.path %>',\r\n<%}%>    };\r\n});",
    "plugin.js.ejs": "/**\r\n* Generated by PluginGenerator from webgme on <%= date %>.\r\n*/\r\n\r\ndefine(['plugin/PluginConfig', 'plugin/PluginBase', 'plugin/<%= pluginID %>/<%= pluginID %>/meta'<%if (templateType) {%>, 'ejs', 'plugin/<%=pluginID%>/<%=pluginID%>/Templates/Templates'<%}%>], function (PluginConfig, PluginBase, MetaTypes<%if (templateType) {%>, ejs, TEMPLATES<%}%>) {\r\n    'use strict';\r\n\r\n    /**\r\n    * Initializes a new instance of <%= pluginID %>.\r\n    * @class\r\n    * @augments {PluginBase}\r\n    * @classdesc This class represents the plugin <%= pluginID %>.\r\n    * @constructor\r\n    */\r\n    var <%= pluginID %> = function () {\r\n        // Call base class' constructor.\r\n        PluginBase.call(this);\r\n        this.metaTypes = MetaTypes;\r\n    };\r\n\r\n    // Prototypal inheritance from PluginBase.\r\n    <%= pluginID %>.prototype = Object.create(PluginBase.prototype);\r\n    <%= pluginID %>.prototype.constructor = <%= pluginID %>;\r\n\r\n    /**\r\n    * Gets the name of the <%= pluginID %>.\r\n    * @returns {string} The name of the plugin.\r\n    * @public\r\n    */\r\n    <%= pluginID %>.prototype.getName = function () {\r\n        return \"<%= pluginName %>\";\r\n    };\r\n\r\n    /**\r\n    * Gets the semantic version (semver.org) of the <%= pluginID %>.\r\n    * @returns {string} The version of the plugin.\r\n    * @public\r\n    */\r\n    <%= pluginID %>.prototype.getVersion = function () {\r\n        return \"0.1.0\";\r\n    };<% if (description) {%>\r\n\r\n    /**\r\n    * Gets the description of the <%= pluginID %>.\r\n    * @returns {string} The description of the plugin.\r\n    * @public\r\n    */\r\n    <%= pluginID %>.prototype.getDescription = function () {\r\n        return \"<%= description %>\";\r\n    };<%}if (configStructure) {%>\r\n\r\n    /**\r\n    * Gets the configuration structure for the <%= pluginID %>.\r\n    * The ConfigurationStructure defines the configuration for the plugin\r\n    * and will be used to populate the GUI when invoking the plugin from webGME.\r\n    * @returns {object} The version of the plugin.\r\n    * @public\r\n    */\r\n    <%= pluginID %>.prototype.getConfigStructure = function () {\r\n        return [\r\n            {\r\n                'name': 'species',\r\n                'displayName': 'Animal Species',\r\n                'regex': '^[a-zA-Z]+$',\r\n                'regexMessage': 'Name can only contain English characters!',\r\n                'description': 'Which species does the animal belong to.',\r\n                'value': 'Horse',\r\n                'valueType': 'string',\r\n                'readOnly': false\r\n            },\r\n            {\r\n                'name': 'age',\r\n                'displayName': 'Age',\r\n                'description': 'How old is the animal.',\r\n                'value': 3,\r\n                'valueType': 'number',\r\n                'minValue': 0,\r\n                'maxValue': 10000,\r\n                'readOnly': false\r\n            },\r\n            {\r\n                'name': 'carnivor',\r\n                'displayName': 'Carnivor',\r\n                'description': 'Does the animal eat other animals?',\r\n                'value': false,\r\n                'valueType': 'boolean',\r\n                'readOnly': false\r\n            },\r\n            {\r\n                'name': 'classification',\r\n                'displayName': 'Classification',\r\n                'description': '',\r\n                'value': 'Vertebrates',\r\n                'valueType': 'string',\r\n                'valueItems': [\r\n                    'Vertebrates',\r\n                    'Invertebrates',\r\n                    'Unknown'\r\n                ]\r\n            },\r\n            {\r\n                'name': 'color',\r\n                'displayName': 'Color',\r\n                'description': 'The hex color code for the animal.',\r\n                'readOnly': false,\r\n                'value': '#FF0000',\r\n                'regex': '^#([A-Fa-f0-9]{6})$',\r\n                'valueType': 'string'\r\n            },\r\n            {\r\n                'name': 'anAsset',\r\n                'displayName': 'Document',\r\n                'description': '',\r\n                'value': '',\r\n                'valueType': 'asset',\r\n                'readOnly': false\r\n            }\r\n        ];\r\n    };\r\n<%}%>\r\n\r\n    /**\r\n    * Main function for the plugin to execute. This will perform the execution.\r\n    * Notes:\r\n    * - Always log with the provided logger.[error,warning,info,debug].\r\n    * - Do NOT put any user interaction logic UI, etc. inside this method.\r\n    * - callback always has to be called even if error happened.\r\n    *\r\n    * @param {function(string, plugin.PluginResult)} callback - the result callback\r\n    */\r\n    <%= pluginID %>.prototype.main = function (callback) {\r\n        // Use self to access core, project, result, logger etc from PluginBase.\r\n        // These are all instantiated at this point.\r\n        var self = this;\r\n        self.updateMETA(self.metaTypes);\r\n        // Using the logger.\r\n        self.logger.info('This is a debug message.');\r\n        self.logger.info('This is an info message.');\r\n        self.logger.warning('This is a warning message.');\r\n        self.logger.error('This is an error message.');\r\n<% if (core) {%>\r\n        // Using the coreAPI to create an object.\r\n        var newNode = self.core.createNode({parent: self.rootNode, base: self.META['FCO']});\r\n        self.core.setAttribute(newNode, 'name', 'My new obj');\r\n        self.core.setRegistry(newNode, 'position', {x: 70, y: 70});\r\n<%}\r\nif (configStructure) {%>\r\n        // Obtain the current user configuration.\r\n        var currentConfig = self.getCurrentConfig();\r\n        self.logger.info('Current configuration ' + JSON.stringify(currentConfig, null, 4));\r\n<%}\r\nif (templateType) {%>\r\n        // First transform ejs-files into js files (needed for client-side runs) -> run Templates/combine_templates.js.\r\n        // See instructions in file. You must run this after any modifications to the ejs template.\r\n        var template<%=templateExt.toUpperCase()%> = ejs.render(TEMPLATES['<%=templateType%>.<%=templateExt%>.ejs'], {a: 'a', b: 'b'});\r\n        var templateFileName = 'generatedFiles/subDir/<%=templateType%>.<%=templateExt%>';\r\n        var artifact = self.blobClient.createArtifact('templateFiles');\r\n        artifact.addFile(templateFileName, template<%=templateExt.toUpperCase()%>, function (err) {\r\n            if (err) {\r\n                callback(err, self.result);\r\n                return;\r\n            }\r\n            self.blobClient.saveAllArtifacts(function (err, hashes) {\r\n                if (err) {\r\n                    callback(err, self.result);\r\n                    return;\r\n                }\r\n                // This will add a download hyperlink in the result-dialog.\r\n                self.result.addArtifact(hashes[0]);\r\n                // This will save the changes. If you don't want to save;\r\n                // exclude self.save and call callback directly from this scope.\r\n                self.result.setSuccess(true);\r\n                self.save('added obj', function (err) {\r\n                    callback(null, self.result);\r\n                });\r\n            });\r\n        });\r\n<%} else {%>\r\n        // This will save the changes. If you don't want to save;\r\n        // exclude self.save and call callback directly from this scope.\r\n        self.result.setSuccess(true);\r\n        self.save('added obj', function (err) {\r\n            callback(null, self.result);\r\n        });\r\n<%}%>\r\n    };\r\n\r\n    return <%= pluginID %>;\r\n});",
    "unit_test.js.ejs": "/**\r\n* Generated by PluginGenerator from webgme on <%= date %>.\r\n*/\r\n\r\n'use strict';\r\nif (typeof window === 'undefined') {\r\n    // server-side setup\r\n    var requirejs = require('requirejs');\r\n    require('../../../../../test-conf.js');\r\n\r\n    var chai = require('chai'),\r\n        should = chai.should(),\r\n        assert = chai.assert,\r\n        expect = chai.expect;\r\n}\r\n\r\n// TODO: Update this with a more to-the-point regular expression\r\nvar semanticVersionPattern = /^\\d+\\.\\d+\\.\\d+$/;\r\n\r\ndescribe('<%= pluginID %>', function () {\r\n    var plugin;\r\n\r\n    before(function (done) {\r\n        requirejs(['plugin/<%= pluginID %>/<%= pluginID %>/<%= pluginID %>'], function (<%= pluginID %>) {\r\n            plugin = new <%= pluginID %>();\r\n            // TODO: Add option for generating createMETATypesTests and including core etc.\r\n            //core = new Core();\r\n            //meta = createMETATypesTests(core);\r\n            //rootNode = core.getRootNode();\r\n            //modelsNode = core.createNode({base: meta.ModelElement, parent: rootNode});\r\n            //core.setAttribute(modelsNode, 'name', 'Models');\r\n        done();\r\n        });\r\n    });\r\n\r\n    it('getVersion', function () {\r\n        expect(semanticVersionPattern.test(plugin.getVersion())).to.equal(true);\r\n    });\r\n\r\n    it('getDescription', function () {\r\n        var description = plugin.getDescription();\r\n        expect(typeof description === 'string' || description instanceof String).to.equal(true);\r\n    });\r\n\r\n    it('getName', function () {\r\n        var name = plugin.getName();\r\n        expect(typeof name === 'string' || name instanceof String).to.equal(true);\r\n    });\r\n\r\n    it('main should be implemented', function () {\r\n        var proto = Object.getPrototypeOf(plugin);\r\n        expect(proto.hasOwnProperty('main')).to.equal(true);\r\n    });\r\n\r\n});"
}});